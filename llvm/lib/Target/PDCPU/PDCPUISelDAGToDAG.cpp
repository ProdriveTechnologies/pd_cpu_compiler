//===-- PDCPUISelDAGToDAG.cpp - A dag to dag inst selector for PDCPU ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the PDCPU target.
//
//===----------------------------------------------------------------------===//

#include "PDCPU.h"
#include "MCTargetDesc/PDCPUMCTargetDesc.h"
#include "PDCPUTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "pdcpu-isel"

namespace {
class PDCPUDAGToDAGISel : public SelectionDAGISel {
  const PDCPUSubtarget *Subtarget = nullptr;

public:
  explicit PDCPUDAGToDAGISel(PDCPUTargetMachine &TargetMachine)
    : SelectionDAGISel(TargetMachine) {}

  StringRef getPassName() const override {
    return "PDCPU DAG->DAG Pattern Instruction Selection";
  }
  
  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<PDCPUSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *Node) override;

  // Include the pieces autogenerated from the target description.
#include "PDCPUGenDAGISel.inc"
};
}

void PDCPUDAGToDAGISel::Select(SDNode *Node) {
  // IF there is a custom node, we already selected
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "=="; Node->dump(CurDAG); dbgs() << "\n");
    Node->setNodeId(-1);
    return;
  }

  // Select the default instruction
  SelectCode(Node);
}

// This pass converts a legalized DAG into a PDCPU-specific DAG, ready
// for instruction scheduling.
FunctionPass *llvm::createPDCPUISelDag(PDCPUTargetMachine &TM) {
  return new PDCPUDAGToDAGISel(TM);
}

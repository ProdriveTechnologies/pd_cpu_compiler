//===-- PDCPUSubtarget.h - Define Subtarget for the PDCPU -------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the PDCPU specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_PDCPU_PDCPUSUBTARGET_H
#define LLVM_LIB_TARGET_PDCPU_PDCPUSUBTARGET_H

#include "PDCPUFrameLowering.h"
#include "PDCPUISelLowering.h"
#include "PDCPUInstrInfo.h"
#include "MCTargetDesc/PDCPUMCTargetDesc.h"
#include "llvm/CodeGen/GlobalISel/CallLowering.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "PDCPUGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class PDCPUSubtarget : public PDCPUGenSubtargetInfo {
  virtual void anchor();
  bool EnableLinkerRelax = false;
  bool EnableRVCHintInstrs = false;
  bool EnableSaveRestore = false;
  unsigned XLen = 32;
  MVT XLenVT = MVT::f32;
  BitVector UserReservedRegister;
  PDCPUFrameLowering FrameLowering;
  PDCPUInstrInfo InstrInfo;
  PDCPURegisterInfo RegInfo;
  PDCPUTargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;
  std::unique_ptr<CallLowering> CallLoweringInfo;

  /// Initializes using the passed in CPU and feature strings so that we can
  /// use initializer lists for subtarget initialization.
  PDCPUSubtarget &initializeSubtargetDependencies(const Triple &TT,
                                                  StringRef CPU, StringRef FS);

public:
  // Initializes the data members to match that of the specified triple.
  PDCPUSubtarget(const Triple &TT, StringRef CPU, const std::string &FS, const TargetMachine &TM);

  const CallLowering *getCallLowering() const override;
  // Parses features string setting specified subtarget options. The
  // definition of this function is auto-generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  const PDCPUFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const PDCPUInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const PDCPURegisterInfo *getRegisterInfo() const override {
    return &RegInfo;
  }
  const PDCPUTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  bool is64Bit() const { return false; }
  MVT getXLenVT() const { return XLenVT; }
  unsigned getXLen() const { return XLen; }
  bool isRegisterReservedByUser(Register i) const {
    assert(i < PDCPU::NUM_TARGET_REGS && i > 1 && "Register out of range");
    return UserReservedRegister[i];
  }
};
} // End llvm namespace

#endif

; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=pdcpu32 -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=PD32IF %s

; These tests are each targeted at a particular PD-CPU FPU instruction. Most
; other files in this folder exercise LLVM IR instructions that don't directly
; match a PD-CPU instruction.

define float @fadd_2(float %a, float %b) nounwind {
; PD32IF-LABEL: fadd_2:
; PD32IF:       # %bb.0:
; PD32IF-NEXT:    fadd f10, f10, f11
;
  %1 = fadd float %a, %b
  ret float %1
}

define float @fsub_2(float %a, float %b) nounwind {
; PD32IF-LABEL: fsub_2:
; PD32IF:       # %bb.0:
; PD32IF-NEXT:    fsub f10, f10, f11
;
  %1 = fsub float %a, %b
  ret float %1
}

define float @fmul_2(float %a, float %b) nounwind {
; PD32IF-LABEL: fmul_2:
; PD32IF:       # %bb.0:
; PD32IF-NEXT:    fmul f10, f10, f11
;
  %1 = fmul float %a, %b
  ret float %1
}

define float @fdiv_2(float %a, float %b) nounwind {
; PD32IF-LABEL: fdiv_2:
; PD32IF:       # %bb.0:
; PD32IF-NEXT:    fdiv f10, f10, f11
;
  %1 = fdiv float %a, %b
  ret float %1
}

declare float @llvm.cos.f32(float)

define float @fcos(float %a) nounwind {
; PD32IF-LABEL: fcos:
; PD32IF:       # %bb.0:
; PD32IF-NEXT:    fcos f10, f10 
;
  %1 = call float @llvm.cos.f32(float %a)
  ret float %1
}

declare float @llvm.sin.f32(float)

define float @fsin(float %a) nounwind {
; PD32IF-LABEL: fsin:
; PD32IF:       # %bb.0:
; PD32IF-NEXT:    fsin f10, f10 
;
  %1 = call float @llvm.sin.f32(float %a)
  ret float %1
}

declare float @llvm.sqrt.f32(float)

define float @fsqrt(float %a) nounwind {
; PD32IF-LABEL: fsqrt:
; PD32IF:       # %bb.0:
; PD32IF-NEXT:    fsqrt f10, f10 
;
  %1 = call float @llvm.sqrt.f32(float %a)
  ret float %1
}
